import cv2
import os
import random
import time
import mediapipe as mp
import pygame

pygame.mixer.init()

pygame.mixer.music.load("beep_sound.mp3")

class HandDetector:
    def __init__(self, mode=False, maxHands=2, detectionCon=0.5, trackCon=0.5):
        self.mode = mode
        self.maxHands = maxHands
        self.detectionCon = detectionCon
        self.trackCon = trackCon
        self.mpHands = mp.solutions.hands
        self.hands = self.mpHands.Hands(static_image_mode=self.mode, max_num_hands=self.maxHands,
                                        min_detection_confidence=self.detectionCon,
                                        min_tracking_confidence=self.trackCon)
        self.mpDraw = mp.solutions.drawing_utils

    def findHands(self, img, draw=True):
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.hands.process(imgRGB)

        if self.results.multi_hand_landmarks:
            for handLms in self.results.multi_hand_landmarks:
                if draw:
                    self.mpDraw.draw_landmarks(img, handLms, self.mpHands.HAND_CONNECTIONS)
        return img

    def findPosition(self, img, handNo=0, draw=True):
        lmlist = []
        if self.results.multi_hand_landmarks:
            myHand = self.results.multi_hand_landmarks[handNo]
            for id, lm in enumerate(myHand.landmark):
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lmlist.append((id, cx, cy))
                if draw:
                    cv2.circle(img, (cx, cy), 7, (255, 0, 255), cv2.FILLED)
        return lmlist

    def fingersUp(self, lmlist):
        fingers = []
        tipIds = [4, 8, 12, 16, 20]

        # Thumb
        if lmlist[tipIds[0]][1] > lmlist[tipIds[0] - 1][1]:
            fingers.append(1)
        else:
            fingers.append(0)

        # Fingers
        for id in range(1, 5):
            if lmlist[tipIds[id]][2] < lmlist[tipIds[id] - 2][2]:
                fingers.append(1)
            else:
                fingers.append(0)
        return fingers


def display_random_images(image_dir, images, num_images=8, frame_width=500, frame_height=500):

    selected_images = random.sample(images, num_images)


    for image_name in selected_images:
        image_path = os.path.join(image_dir, image_name)
        image = cv2.imread(image_path)

        if image is None:
            print(f"Error loading image {image_name}")
            continue

        resized_image = cv2.resize(image, (frame_width, frame_height))

        cv2.imshow('Memorize the Gesture', resized_image)
        cv2.waitKey(1000)
        cv2.destroyWindow('Memorize the Gesture')
        # time.sleep(1)

    cv2.destroyAllWindows()
    return selected_images


def gesture_to_image_name(fingers, predefined_gestures):
    for gesture, pattern in predefined_gestures.items():
        if fingers == pattern:
            return gesture
    return None


def main():
    # Define the mapping of gestures to images
    predefined_gestures = {
        'Thumbs Up': [1, 0, 0, 0, 0],
        'Index Up': [0, 1, 0, 0, 0],
        'Peace': [0, 1, 1, 0, 0],
        'Rock and Roll': [1, 1, 0, 0, 1],
        'Fist': [0, 0, 0, 0, 0],
        'five': [1, 1, 1, 1, 1],
        'middle_finger': [0, 0, 1, 0, 0],
        'pinky': [0, 0, 0, 0, 1],
        'three': [0, 1, 1, 1, 0],
        'thumb_three': [1, 1, 1, 0, 0],
        'L': [1, 1, 0, 0, 0],
        'pinky_three': [0, 0, 1, 1, 1],
        'four': [0, 1, 1, 1, 1],
        'middle down three': [0, 1, 0, 1, 1],
        'call sign': [1, 0, 0, 0, 1],
        'joint_two': [0, 0, 0, 1, 1],
    }

    image_dir = '.'
    images = [
        'fist.png', 'index_up.jpg', 'peace.png', 'three.jpeg', 'thumbs_up.jpeg', 'rock_and_roll.jpeg', 'L.jpeg',
        'call_me.jpeg', 'pinky.jpg', 'thumb_three.jng', 'joint_two.jpeg', 'five.jpeg', 'four.jpg'
    ]

    selected_images = display_random_images(image_dir, images)

    image_to_gesture = {
        'fist.png': 'Fist',
        'index_up.jpg': 'Index Up',
        'peace.png': 'Peace',
        'rock_and_roll.jpeg': 'Rock and Roll',
        'three.jpeg': 'three',
        'thumbs_up.jpeg': 'Thumbs Up',
        'L.jpeg': 'L',
        'call_me.jpeg': 'call sign',
        'pinky.jpg': 'pinky',
        'thumb_three.jng': 'thumb_three',
        'joint_two.jpeg': 'joint_two',
        'five.jpeg': 'five',
        'four.jpg': 'four',
    }

    # Ensure the selected images map to gestures without repetition
    expected_gestures = [image_to_gesture[img] for img in selected_images]
    print(f"Expected Gestures: {expected_gestures}")

    # Capture real-time gestures
    cap = cv2.VideoCapture(0)
    detector = HandDetector()
    captured_gestures = []
    consistent_gesture_start = None
    consistent_gesture = None

    while len(captured_gestures) < len(expected_gestures):
        success, img = cap.read()
        img = detector.findHands(img)
        lmlist = detector.findPosition(img)

        if len(lmlist) != 0:
            fingers = detector.fingersUp(lmlist)
            gesture = gesture_to_image_name(fingers, predefined_gestures)

            if gesture:
                if gesture != consistent_gesture:
                    consistent_gesture = gesture
                    consistent_gesture_start = time.time()

                elif time.time() - consistent_gesture_start >= 1.5:
                    if len(captured_gestures) == 0 or captured_gestures[-1] != gesture:
                        captured_gestures.append(gesture)
                        print(f"Captured Gesture: {gesture}")
                        pygame.mixer.music.play()
                        cv2.putText(img, gesture, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 3)
                    consistent_gesture = None

        cv2.imshow("Webcam", img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


    if captured_gestures == expected_gestures:
        print("Well tried!")
    else:
        correct_count = sum([1 for i in range(len(expected_gestures)) if
                             i < len(captured_gestures) and captured_gestures[i] == expected_gestures[i]])
        if correct_count == 4:
            print("Candy won : 1, No. of matched gestures: {}".format(correct_count))
        elif correct_count >= 5 & correct_count <= 7:
            print("Candies won : 2, No. of matched gestures: {}".format(correct_count))
        elif correct_count == 8:
            print("Candies won : 3 No. of matched gestures: {}".format(correct_count))
        else:
            print("Keep practicing!")


if __name__ == "__main__":
    main()
